{"meta":{"title":"Dreamkong","subtitle":"人生苦短,我用Python。","description":null,"author":"秦龙","url":"http://qinlong.men"},"pages":[{"title":"","date":"2017-06-23T11:49:05.000Z","updated":"2017-06-23T11:49:05.000Z","comments":false,"path":"categories/index.html","permalink":"http://qinlong.men/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-06-23T11:48:26.000Z","updated":"2017-06-23T11:48:26.000Z","comments":false,"path":"tags/index.html","permalink":"http://qinlong.men/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Python高效编程(五)","slug":"Python高效编程-五","date":"2017-10-26T10:40:37.000Z","updated":"2017-10-26T07:47:35.000Z","comments":true,"path":"2017/10/26/Python高效编程-五/","link":"","permalink":"http://qinlong.men/2017/10/26/Python高效编程-五/","excerpt":"实际编程和面试都会遇到的典型问题。","text":"实际编程和面试都会遇到的典型问题。 图片来源于网络 如何派生内置不可变类型并修改其实例化行为12345678910111213#我们想自定义一种新类型元组,对于传入的可迭代对象,我们只想保留其中int类型&gt;0的元素 新类型是内置tuple的子类class IntTuple(tuple): def __new__(cls,iterable): # 使用生成器过滤 g = (x for x in iterable if isinstance(x,int) and x &gt; 0) return super(IntTuple,cls).__new__(cls,g) def __init__(self,iterable): super(IntTuple,self).__init__() it = IntTuple([1,-2,3,'x']) it 如何为创建大量实例节省内存123456789101112131415161718192021222324252627282930class Player(object): def __init__(self,uid,name,status=0,level=1): self.uid = uid self.name = name self.status = status self.level = level class Player2(object): __slots__ = ['uid','name','status','level'] def __init__(self,uid,name,status=0,level=1): self.uid = uid self.name = name self.status = status self.level = level p1 = Player('001','uu')p2 = Player2('001','uu')set(dir(p1)) - set(dir(p2))# p1比p2多了&#123;'__dict__', '__weakref__'&#125;# '__dict__'可以动态绑定p1.x = 123del p1.__dict__['x']import sys# 占用了320内存sys.getsizeof(p1.__dict__)# p2事先定义__slots__ 声明了实例属性名字的列表# p2就无法动态绑定 从而节省了内存# p2.x = 123 如何创建可管理的对象属性123456789101112131415161718192021222324from math import piclass Cricle(object): def __init__(self,radius): self._radius = radius @property def radius(self): return self._radius @radius.setter def radius(self,value): if not isinstance(value,(int,float)): raise ValueError('wrong type') self._radius = value def getArea(self): return self._radius ** 2 * pic = Cricle(5)c.radius 如何让类支持比较操作1234567891011121314151617181920from math import pifrom functools import total_ordering@total_orderingclass Cricle(object): def __init__(self,radius): self._radius = radius def area(self): return self._radius ** 2 * pi def __lt__(self,obj): return self.area() &lt; obj.area() def __eq__(self,obj): return self.area() == obj.area() c1 = Cricle(3)c2 = Cricle(5.0)c1 &gt; c2 如何使用描述符对实例属性做类型检查12345678910111213141516171819202122232425262728# 描述符 __get__ __set__ __del__class Attr(object): def __init__(self,name,type_): self.name = name self.type_ = type_ def __get__(self,instance,cls): return instance.__dict__[self.name] def __set__(self,instance,value): if not isinstance(value,self.type_): raise TypeError('expected an %s'%self.type_) instance.__dict__[self.name] = value def __delete__(self,instance): del instance.__dict__[self.name] class Person(object): name = Attr('name',str) age = Attr('age',int) height = Attr('height',float) p = Person()p.name = '123'p.age = 123p.height = 1.0 如何通过实例方法名字的字符串调用方法12345678910111213141516171819202122232425262728293031323334353637383940class Circle(object): def __init__(self,r): self.r = r def area(self): return self.r ** 2 * 3.14class Rectangle(object): def __init__(self,w,h): self.w = w self.h = h def get_area(self): return self.w * self.h class Triangle(object): def __init__(self,a,b,c): self.a = a self.b = b self.c = c def getArea(self): #海伦公式:√[p(p-a)(p-b)(p-c) ]其中p=1/2(a+b+c) p = (self.a + self.b + self.c) / 2 return (p * (p - self.a) * (p - self.b) * (p - self.c)) ** 0.5 def getArea(shape): for name in ('area','get_area','getArea'): f = getattr(shape,name,None) if f: return f() shape1 = Circle(3)shape2 = Rectangle(5,6)shape3 = Triangle(3,4,5)shapes = [shape1,shape2,shape3]print(list(map(getArea,shapes)))","categories":[{"name":"Python高效编程","slug":"Python高效编程","permalink":"http://qinlong.men/categories/Python高效编程/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://qinlong.men/tags/Python/"}]},{"title":"Python高效编程(四)","slug":"Python高效编程-四","date":"2017-10-24T08:52:44.000Z","updated":"2017-10-24T09:18:28.000Z","comments":true,"path":"2017/10/24/Python高效编程-四/","link":"","permalink":"http://qinlong.men/2017/10/24/Python高效编程-四/","excerpt":"实际编程和面试都会遇到的典型问题。","text":"实际编程和面试都会遇到的典型问题。 图片来源于网络 如何读写文本文件123456789101112131415161718# python2s = u&apos;你好&apos;f = open(&apos;py2.txt&apos;,&apos;w&apos;) f.write(s.encode(&apos;gbk&apos;))f.close()f = open(&apos;py2.txt&apos;,&apos;r&apos;)t = f.read()f.close()print t.decode(&apos;gbk&apos;)# python3f = open(&apos;py3.txt&apos;,&apos;wt&apos;,encoding=&apos;utf-8&apos;)f.write(&apos;你好&apos;)f.close()f = open(&apos;py3.txt&apos;,&apos;rt&apos;,encoding=&apos;utf-8&apos;)s = f.read()f.close()print(s) 如何设置文件的缓冲123456789# 全缓冲# 默认是4096f = open(&apos;demo.txt&apos;,&apos;w&apos;,buffering=2048)f.write(&apos;-&apos; * 2048)f.write(&apos;+&apos;)# 行缓冲f = open(&apos;demo1.txt&apos;,&apos;w&apos;,buffering=1)# 无缓冲f = open(&apos;demo2.txt&apos;,&apos;w&apos;,buffering=0) 如何访问文件的状态1234567891011121314151617181920212223242526import osimport stat#第一种 直接使用系统调用# 1 文件的类型s = os.stat(&apos;demo.txt&apos;)stat.S_ISDIR(s.st_mode)stat.S_ISREG(s.st_mode)# 2 文件的访问权限s.st_mode &amp; stat.S_IXUSR# 3 文件的最后的访问/修改/节点状态更改时间import timetime.localtime(s.st_atime)time.localtime(s.st_mtime)time.localtime(s.st_ctime)# 4 普通文件的大小s.st_size#第二种使用os.path下的函数os.path.isdir(&apos;demo.txt&apos;)os.path.isfile(&apos;demo.txt&apos;)os.path.getatime 如何使用临时文件12345678910from tempfile import TemporaryFile,NamedTemporaryFilef = TemporaryFile()f.write(b&apos;acvbnm&apos;*100)f.seek(0)f.read(2)ntf = NamedTemporaryFile()ntf.name 如何读写csv文件1234567891011121314151617181920from urllib.request import urlretrieve# 下载平安银行2017-04-01到2017-10-20的数据#日期,股票代码,名称,收盘价,最高价,最低价,开盘价,前收盘,涨跌额,涨跌幅,换手率,成交量,成交金额,总市值,流通市值,成交笔数urlretrieve(&apos;http://quotes.money.163.com/service/chddata.html?code=1000001&amp;start=20170401&amp;end=20171020&apos;,&apos;pingan.csv&apos;)with open(&apos;pingan.csv&apos;,&apos;rt&apos;,encoding = &apos;gbk&apos;) as rf: reader = csv.reader(rf) with open(&apos;pingan_copy.csv&apos;,&apos;wt&apos;) as wf: writer = csv.writer(wf) headers = next(reader) writer.writerow(headers) for row in reader: # 提取出2017-10-01后 成交额大于5000W的数据 if row[0] &lt; &apos;2017-10-01&apos;: break if round(float(row[12])) &gt;= 50000000: writer.writerow(row)print(&apos;end&apos;) 如何读写json文件1234567891011121314import jsonimport requestsurl = &apos;http://wthrcdn.etouch.cn/weather_mini?city=北京&apos;response = requests.get(url)# json.loads: str转成dictres = json.loads(response.content.decode(&apos;utf-8&apos;))type(res)weather_forecast = res[&apos;data&apos;][&apos;forecast&apos;][0]# json.dumps: dict转成strl = json.dumps(res)type(l) 如何构建并解析xml文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546from xml.etree.ElementTree import Element,ElementTree,tostring,parsee = Element(&apos;collection&apos;)e.set(&apos;shelf&apos;,&apos;New Arrivals&apos;)e1 = Element(&apos;movie&apos;)e1.set(&apos;title&apos;,&apos;Enemy Behind&apos;)e11 = Element(&apos;type&apos;)e11.text = &apos;War, Thriller&apos;e1.append(e11)e.append(e1)e2 = Element(&apos;movie&apos;)e2.set(&apos;title&apos;,&apos;Enemy Behind&apos;)e21 = Element(&apos;type&apos;)e21.text = &apos;War, Thriller&apos;e2.append(e21)e.append(e2)e3 = Element(&apos;movie&apos;)e3.set(&apos;title&apos;,&apos;Enemy Behind&apos;)e31 = Element(&apos;type&apos;)e31.text = &apos;War, Thriller&apos;e3.append(e31)e.append(e3)e4 = Element(&apos;movie&apos;)e4.set(&apos;title&apos;,&apos;Enemy Behind&apos;)e41 = Element(&apos;type&apos;)e41.text = &apos;War, Thriller&apos;e4.append(e41)e.append(e4)et = ElementTree(e)et.write(&apos;demo.xml&apos;) f = open(&apos;demo.xml&apos;)et = parse(f)root = et.getroot()# for child in root:# print(child.get(&apos;title&apos;))#只能寻找当前元素的直接子元素root.find(&apos;movie[@title]&apos;)root.findall(&apos;movie&apos;)root.findall(&apos;movie[1]&apos;)root.findall(&apos;movie[@title=&quot;Ishtar&quot;]&apos;)root.findall(&apos;movie[type=&quot;Comedy&quot;]&apos;)list(root.iter(&apos;movie&apos;)) 如何读写excel文件123456789101112131415161718192021222324import xlrd,xlwt# 读rbook = xlrd.open_workbook(&apos;demo.xlsx&apos;)sheet = rbook.sheet_by_index(0)# 列数sheet.ncols# 行数sheet.nrows# 单元格 cellcell = sheet.cell(0,0)# 返回一行sheet.row(0)sheet.row_values(1)# 返回一列sheet.col(0)sheet.col_values(1)# 写wbook = xlwt.Workbook()wsheet = wbook.add_sheet(&apos;sheet1&apos;)# 写入cellwsheet.write(0,0,&apos;123&apos;)wbook.save(&apos;output.xlsx&apos;)","categories":[{"name":"Python高效编程","slug":"Python高效编程","permalink":"http://qinlong.men/categories/Python高效编程/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://qinlong.men/tags/Python/"}]},{"title":"Python高效编程(三)","slug":"Python高效编程-三","date":"2017-10-20T09:08:39.000Z","updated":"2017-10-24T09:18:35.000Z","comments":true,"path":"2017/10/20/Python高效编程-三/","link":"","permalink":"http://qinlong.men/2017/10/20/Python高效编程-三/","excerpt":"实际编程和面试都会遇到的典型问题。","text":"实际编程和面试都会遇到的典型问题。 图片来源于网络 如何判断字符串a是否已字符串b开头或者结尾12345678910111213#遍历以'.py'和'.sh'结尾的文件,改为可执行权限import os, stats = 'test.py's.endswith(('.py','.sh'))#参数只能是tuple#文件权限oct(os.stat('test.sh').st_mode)os.chmod('test.sh',os.stat('test.sh').st_mode|stat.S_IXUSR)for name in os.listdir(): if name.endswith(('.py','.sh')): os.chmod(name,os.stat(name).st_mode|stat.S_IXUSR) 如何调整字符串中的文本格式12345678910'''2017-10-09adasdasdasd2017-11-12dsfsfsdfsdfsd将其中的日期(yyyy-MM-dd)改为(MM/dd/YYYY)格式'''import res = '2017-10-09adasdasdasd\\n2017-11-12dsfsfsdfsdfsd're.sub('(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)',r'\\2/\\3/\\1',s)re.sub('(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;2&#125;)-(?P&lt;day&gt;\\d&#123;2&#125;)',r'\\g&lt;month&gt;/\\g&lt;day&gt;/\\g&lt;year&gt;',s) 如何将多个小字符串拼接成一个大字符串1234567#第一种(拼接项少) +#第二种(拼接项多) ''.join()list1 = ['abc','123','23','sdsa','xyz']''.join(list1)list2 = ['abc',123,'23',4654,'xyz']''.join(str(x) for x in list2) 如何对字符串进行左,右,居中对齐12345678910s = 'abc'#第一种 ljust() rjust() center()s.ljust(20)s.rjust(20,'!')s.center(20,\"-\")#第二种 formatformat(s,'&lt;20')format(s,'&gt;20')format(s,'^20') 如何去掉字符串中不需要的字符12345678910111213141516171819#1 去掉字符串两端的字符 strip() lstrip() rstrip()s = ' aac 123 's.strip()s = '!!!!asdasd+++++'s.strip('!+')#2 删除单个固定位置字符,可以使用切片+拼接s = 'abc::123's[:3]+s[5:]#3 字符串的replace()方法或正则表达式re.sub()删除任意位置字符s = '\\tabc\\r\\t123\\txyz's.replace('\\t','')#只能替换一种import rere.sub('[\\t,\\r]','',s)#支持同时替换多种#4 字符串translate()方法.可以同时删除多种不同字符s = 'abc234456xyz's.translate(str.maketrans('abcxyz','xyzabc'))","categories":[{"name":"Python高效编程","slug":"Python高效编程","permalink":"http://qinlong.men/categories/Python高效编程/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://qinlong.men/tags/Python/"}]},{"title":"Python高效编程(二)","slug":"Python高效编程-二","date":"2017-10-20T05:10:15.000Z","updated":"2017-10-24T09:18:42.000Z","comments":true,"path":"2017/10/20/Python高效编程-二/","link":"","permalink":"http://qinlong.men/2017/10/20/Python高效编程-二/","excerpt":"实际编程和面试都会遇到的典型问题。 图片来源于网络","text":"实际编程和面试都会遇到的典型问题。 图片来源于网络 如何实现可迭代对象和迭代器对象123456789101112131415161718192021222324252627282930313233343536373839#可迭代对象l = [1,2,3,4]s = 'abcde'#迭代器对象t = iter(l)import requestsfrom collections import Iterator,Iterable#实现一个迭代器对象WeatherIterator,__next__方法每次返回一个城市气温class WeatherIterator(Iterator): def __init__(self,cities): self.cities = cities self.index = 0 def getWeather(city): r = requests.get(u'http://wthrcdn.etouch.cn/weather_mini?city=' + city) data = r.json()['data']['forecast'][0] return '%s: %s ,%s '%(city,data['low'],data['high']) def __next__(self): if self.index == len(self.cities): raise StopIteration city = self.cities[self.index] self.index += 1 return getWeather(city)#实现一个可迭代对象WeatherIterable,__iter__方法返回一个迭代器对象class WeatherIterable(Iterable): def __init__(self,cities): self.cities = cities def __iter__(self): return WeatherIterator(self.cities) #[u'漠河',u'海南',u'乌鲁木齐',u'上海']for x in WeatherIterable([u'漠河',u'海南',u'乌鲁木齐',u'上海']): print(x) 如何使用生成器函数实现可迭代对象1234567891011121314151617181920212223# 给定一个可迭代对象的类,它能迭代出给定范围内的所有素数class PrimeNumber(): def __init__(self,start,end): self.start = start self.end = end def isPrimeNum(self,k): if k &lt; 2: return False for i in range(2,k): if k % i == 0: return False return True def __iter__(self): for k in range(self.start,self.end + 1): if self.isPrimeNum(k): yield k for x in PrimeNumber(1,100): print(x) 如何进行反向迭代以及如何实现反向迭代12345678910111213141516171819202122232425262728#实现一个连续浮点数发生器FloatRange(start,end,step)# l = [1,2,3,4,5]# for x in reversed(l):# print(x)class FloatRange(): def __init__(self,start,end,step=0.1): self.start = start self.end = end self.step = step def __iter__(self): t = self.start while t &lt;= self.end: yield t t += self.step def __reversed__(self): t = self.end while t &gt;= self.start: yield t t -= self.stepfor x in reversed(FloatRange(1.0,5.5,0.5)): print(x) 如何对迭代器做切片操作12345678910111213#有一个文本文件,我们想获取某范围内的内容 eg:100-300linesimport thisf = open('test','w')f.write(this.s)f.close()from itertools import islicef = open('test','r')for x in islice(f,3,5): print(x) 如何在一个for语句中迭代多个可迭代对象123456789101112131415161718192021222324252627from random import randint#每个学生有三门成绩(并行)chese_grade = [randint(60,100) for _ in range(50)]english_grade = [randint(60,100) for _ in range(50)]math_grade = [randint(60,100) for _ in range(50)]for c,e,m in zip(chese_grade,english_grade,math_grade): print('总分:%3d 语文:%3d 英语:%3d 数学:%3d'%(c+e+m,c,e,m))#有四个班,一次英语考试的成绩存储在四个列表里,统计90以上的人数(串行)from itertools import chainchain([1,2,3,4],['a','b','c'])english_grade1 = [randint(60,100) for _ in range(45)]english_grade2 = [randint(60,100) for _ in range(53)]english_grade3 = [randint(60,100) for _ in range(49)]english_grade4 = [randint(60,100) for _ in range(35)]count = 0for x in chain(english_grade1,english_grade2,english_grade3,english_grade4): if x &gt;= 90: count += 1print(count)","categories":[{"name":"Python高效编程","slug":"Python高效编程","permalink":"http://qinlong.men/categories/Python高效编程/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://qinlong.men/tags/Python/"}]},{"title":"Python高效编程(一)","slug":"Python高效编程-一","date":"2017-10-19T01:18:47.000Z","updated":"2017-10-24T09:18:51.000Z","comments":true,"path":"2017/10/19/Python高效编程-一/","link":"","permalink":"http://qinlong.men/2017/10/19/Python高效编程-一/","excerpt":"实际编程和面试都会遇到的典型问题。 图片来源于网络","text":"实际编程和面试都会遇到的典型问题。 图片来源于网络 如何在列表,字典,集合中根据条件筛选数据1234567891011121314from random import randintfrom timeit import timeit​data = [randint(-10,10) for _ in range(10)] filter(lambda x:x &gt;= 0,data)#首选列表解析 时间比filter少一半左右[x for x in data if x &gt;= 0]​data = &#123;x:randint(60,100) for x in range(1,21)&#125;&#123;k:v for k,v in data.items() if v &gt; 90&#125;​data = set(data)&#123;x for x in data if x%3==0&#125; 如何为元组中每个元素命名,提高程序的可读性123456789101112131415161718192021#第一种# NAME = 0# AGE = 1# SEX = 2# EMAIL = 3NAME,AGE,SEX,EMAIL = range(4)student = ('Jan',14,'male','jan@jan.net')#nameprint(student[NAME])#第二种from collections import namedtupleStudent = namedtuple('Student',['name','age','sex','email'])student= Student('Jan',14,'male','jan@jan.net')#nameprint(student[NAME])student.ageisinstance(student,tuple) 如何统计序列中元素的出现频度12345678910111213141516171819202122from random import randintdata = [randint(1,10) for x in range(20)]c = dict.fromkeys(data,0)#第一种for x in data: c[x]+=1 #第二种from collections import Counterc2 = Counter(data)#出现频度最高的三个c2.most_common(3)#统计一篇文章中单词出现次数import re#导入Python之禅import thisc3 = Counter(re.split('\\W+',this.s)) 如何根据字典中值的大小,对字典中的项排序1234567891011from random import randintdata = &#123;x:randint(60,100) for x in 'abcdefg'&#125;#sorted(data.values())#第一种t = zip(data.values(),data.keys())sorted(t)#第二种sorted(data.items(),key=lambda x: x[1]) 如何快速找到多个字典中的公共键(key)123456789101112131415161718from random import randint,samples1 = &#123;x: randint(1,4) for x in sample('abcdefgh',randint(3,6))&#125;s2 = &#123;x: randint(1,4) for x in sample('abcdefgh',randint(3,6))&#125;s3 = &#123;x: randint(1,4) for x in sample('abcdefgh',randint(3,6))&#125;#第一种res = []for k in s1: if k in s2 and k in s3: res.append(k) #第二种from functools import reduces1.keys()&amp;s2.keys()&amp;s3.keys()map(dict.keys,[s1,s2,s3])reduce(lambda a, b:a &amp; b,map(dict.keys,[s1,s2,s3])) 如何让字典保持有序12345678910111213141516171819202122232425262728293031d = &#123;&#125;d['Tom'] = (1,30)d['Linda'] = (1,40)d['Jack'] = (1,50)from collections import OrderedDictd = OrderedDict()d['Tom'] = (1,30)d['Linda'] = (1,40)d['Jack'] = (1,50)d.keys()from time import timefrom random import randintsorce = OrderedDict()players = list('abcdefgh')start = time()for i in range(8): input() p = players.pop(randint(0, 7 - i)) end = time() print(i+1,p,end - start) sorce[p] = (i+1,end - start)print('-'*20)for k in sorce: print(k,sorce[k]) 如何实现用户的历史记录功能(最多n条)1234567891011121314151617181920212223242526from collections import dequefrom random import randintN = randint(0,100)# 一个容纳5个值的队列history = deque([],5)def guess(k): if k == N: print('right!') return True if k &lt; N: print('%s is less than N'%k) else: print('%s is greater than N'%k) return Falsewhile True: input_number = input('please input a number: ') if input_number.isdigit(): k = int(input_number) history.append(k) if guess(k): break elif input_number == 'history': print(list(history))","categories":[{"name":"Python高效编程","slug":"Python高效编程","permalink":"http://qinlong.men/categories/Python高效编程/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://qinlong.men/tags/Python/"}]},{"title":"Mac下安装Python虚拟环境Virtualenv","slug":"Mac下安装Python虚拟环境Virtualenv","date":"2017-10-18T09:11:10.000Z","updated":"2017-10-24T09:18:15.000Z","comments":true,"path":"2017/10/18/Mac下安装Python虚拟环境Virtualenv/","link":"","permalink":"http://qinlong.men/2017/10/18/Mac下安装Python虚拟环境Virtualenv/","excerpt":"","text":"virtualenv官方文档对virtualenv的解释是: virtualenv is a tool to create isolated Python environments. virtualenv可以创建一个独立的 Python 环境，每个项目都可以有一个专属环境，避免了不同各种包安装冲突以及版本要求问题，可以让你更方便快捷的切换不同 Python 环境，更高效的开发。 pip是 Python 自带的包管理工具。 安装 virtualenv$ sudo pip install virtualenv 测试virtualenv是否安装成功: 123$ mkdir ~/Pyenv$ cd ~/Pyenv$ mkvirtualenv env1 安装 virtualenvwrapperVirtaulenvwrapper是对virtualenv的封装，可以更方便地管理虚拟环境。 $ sudo easy_install virtualenvwrapper 第一次安装完成后需要，先设置WORKON_HOME，即环境的存储路径，并且运行source /usr/local/bin/virtualenvwrapper.sh 12$ export WORKON_HOME=~/Pyenv$ source /usr/local/bin/virtualenvwrapper.sh 把export命令和source命令加入到~/.bash_profile中，每次打开终端就无需初始化了。 123$ vim ~/.bash_profile$ export WORKON_HOME=~/Pyenv$ source /usr/local/bin/virtualenvwrapper.sh 创建虚拟环境$ mkvirtualenv env２ 环境创建之后，会自动进入该目录，并激活该环境，当前路径前面就会有 (env2)。 列出虚拟环境：123$ lsvirtualenv -benv1env2 切换虚拟环境：$ workon env1 查看环境里安装了哪些包：$ lssitepackages 复制虚拟环境：12$ cpvirtualenv env1 env3Copying env1 as env3... 退出虚拟环境：$ deactivate 删除虚拟环境：12$ rmvirtualenv env2Removing env2... 至此，Python虚拟环境Virtualenv安装流程完毕，你可以在你自己的虚拟环境下随意安装各种包，不同项目间也不会相互影响了。","categories":[{"name":"Python环境","slug":"Python环境","permalink":"http://qinlong.men/categories/Python环境/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://qinlong.men/tags/Python/"}]},{"title":"Linux 操作命令","slug":"Linux-操作命令","date":"2017-06-26T14:45:42.000Z","updated":"2017-10-24T09:19:04.000Z","comments":true,"path":"2017/06/26/Linux-操作命令/","link":"","permalink":"http://qinlong.men/2017/06/26/Linux-操作命令/","excerpt":"整理了一些日常用的 Linux命令,留作以后查阅之用。","text":"整理了一些日常用的 Linux命令,留作以后查阅之用。绝对路径：cd /home/python相对路径：cd Downloads. 表示：当前那路径..表示：当前路径的上一层../.. 表示：当前路径的上二层没有...或者以上的ls: ls 查看当前路径下的文件以及文件夹的名字 ls /bin 表示：查看根目录下的bin文件夹下的东西 ls Documents 表示：查看当前路径下的Documents文件夹下的所有东西 ls *: * 表示任意多个字符，也可以没有 ? 表示一个字符，一定有1个，不能没有 [xn] 表示：中括号中的任意一个字符 [abcdef]可以写成[a-f]:表示 从a到f之间的任意一个字符 -a 隐藏文件 -l 列表显示风格 -h 配合-l 显示一个合理的大小单位cd ： cd Desktop 进入到Desktop这个文件夹 cd 文件夹的名字 cd .. 跳转到当前路径的上一层 cd - 跳转到上一次所在的路径（类似电视机遥控器中的回看） cd ~ 跳转到当前用户的家目录(/home/python)pwd：显示当前操作的路径（绝对路径 /aaa/bb/cc）clear:清屏tab键：用来自动补全touch:创建一个文件，linux中没有后缀的说法，所有文件名自定义重定向: ls &gt; test.txt 表示：把本来显示在终端上的信息写入到test.txt文件中 &gt;&gt; 和 &gt; 的区别是:&gt;&gt; 是在源文件的末尾添加，而&gt; 先清空然后再添加gedit haha.txt 用gedit编辑器打开haha.txt文件more: more test.txt 如果test.txt文件的内容如果很多，那么就用分屏的方式显示 ls -alh | more 先把ls -alh显示的内容存放到 管道|中，，然后more从管道中去数据，然后分屏显示mkdir:创建文件夹 mkdir a 在当前路径下创建a文件夹 mkdir A/B/C 不能创建，，，需要添加-ptree：以目录树的方式显示 文件夹结构rmdir: 删除空文件夹rm: rm haha.txt 删除一个普通文件 rm 文件夹 会有提示，要删除的东西是个文件夹，，，，如果真的要删除可以添加 -r(递归删除文件夹里面的所有东西)ln -s 源文件 链接文件 表示：软连接ln 源文件 链接文件 表示：硬链接，，，注意硬链接数量为1时，才会真正删除数据，否则不会cat 1. 查看文件的内容 2. 合并多个文件 需要和 重定向&gt;配合 cat 1.txt 2.txt &gt; 3.txtgrep :从指定的文件中搜索需要的内容 -n:显示行号 -i:不区分大小写 -v:取反，即不包含需要的内容的行作业： 有一个文件（内容自定），现在需要把以字母a开头的所有内容和字母b结尾的所有内容存放到一个新文件result.txt中 例如： 源文件为 test.txt,内容如下: sdfisdbbbb abcdefksjdfkjskdfksdj akksjdfkjskdfj0000 kjskdfjaaksjdfkjsdkfaaa ijijsdfjsdbbbbbb12 bksjdkfjsdja kajsdkfjaksb ksjdkfkasdbbbbb 执行完之后的结果为： abcdefksjdfkjskdfksdj akksjdfkjskdfj0000 sdfisdbbbb kajsdkfjaksb ksjdkfkasdbbbbb查找文件： find 路径 -name &apos;*.t?t&apos; 通配符，注意点： [a-zA-Z0-9]*.txt复制文件： cp a b 将a文件夹整体复制到b文件夹下 cp a/* b 将a文件夹下的所有内容赋值到b文件夹下剪切文件： mv a b 将a文件夹整体移动（剪切）到b文件夹下B----字节K----&gt;千字节 1024BM----&gt;兆字节 1024KGTptar -cvf xxx.tar * 打包gzip xxx.tar 压缩gzip -d xxx.tar.gztar -xvf xxx.tar常见的压缩解压方式：tar -zcvf xxx.tar.gz *tar -zxvf xxx.tar.gztar -jcvf xxx.tar.bz2 *tar -jxvf xxx.tar.bz2linux：多用户多任务的OSifconfig :查看ip地址 WINDOWS中使用ipconfigping： ping 192.168.17.76 测试网络连接是否正常ssh:远程登录 ssh python@192.168.17.76 ssh 用户名@ipwhoami：查看当前用户名who:查看当前登录的用户信息exit:退出登录useradd 新的用户名 -m -d /home/新用户名 -g 组名passwd 用户名su 需要切换的用户名su - 需要切换的用户名, 切换用户后，还会主动跳转到该用户的家目录python----&gt;laowang-----&gt;pythonsudo 当需要超级管理员的权限时需要添加，并且在命令行的最前面，后面需要空格sudo passwd laowangsudo -s 直接切换到root用户groupadd YYY 添加一个YYY用户组groupdel YYY 删除一个组，，，，注意需要sudocat /etc/groupgroups laowang表示：查看laowang所属的所有用户组usermod -g YYY laowang 把老王添加到YYY组里面usermod -a -G XXX laowang 把老王添加到XXX组里面 -g 和 -G，-g指定的是默认的组useradd创建的新用户没有sudo，或者切换到root的权限，需要把这个用户添加到adm、sudo组里面才可以chmod 修改文件的权限 u：拥有者 g:同组者 o：其他人 a:所有，即u、g、o + 添加权限 - 去除权限 = 设定权限 r:读------&gt;对应的数字是4 w：写------&gt;对应的数字是2 x：执行------&gt;对应的数字是1 chmod 777 文件夹，只会修改文件夹的权限为777 ，不会修改里面文件的权限 -R 会修改文件夹里面所有的文件、文件夹的权限（递归）vi： 从命令模式---》编辑模式：i、a、o、I、A、O 从编辑模式----》命令模式：ESC 从命令模式----》末行模式：输入一个冒号，即shit+; 末行模式： w保存 q退出 ！强制 常用的： wq保存退出，等价于 x（小写的x），，，，还等价于在命令模式 shit+2个z q!不保存退出 命令模式： hjkl控制上下作用 M中间位置 L当前屏幕的最后一行 yy 复制，8yy：表示从当前光标所在的行开始复制8行 p 粘贴 dd 剪切，8dd：表示从当前光标所在的行开始剪切8行 u 撤销 ctl+r 反撤销 G 调到最后1行 15G 表示跳转到第15行 1G表示跳转到第1行 gg 跳转到第1行","categories":[{"name":"Linux","slug":"Linux","permalink":"http://qinlong.men/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://qinlong.men/tags/Linux/"}]}]}